plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'checkstyle'
    id 'jacoco'
    id "org.sonarqube" version "4.4.1.3373"
}

group = 'com.tf4'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

jacoco {
    toolVersion = "0.8.8"
}

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExtensions
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    testImplementation 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    compileOnly 'org.projectlombok:lombok'

    // Spatial
    implementation 'org.hibernate.orm:hibernate-spatial'
    implementation 'com.querydsl:querydsl-spatial'

    //AWS
    implementation platform("io.awspring.cloud:spring-cloud-aws-dependencies:3.1.0")
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-parameter-store'
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3'

    // RestDocs
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // QueryDsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'
    implementation group: 'com.auth0', name: 'java-jwt', version: '4.4.0'
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk18on', version: '1.77'
    implementation group: 'org.bouncycastle', name: 'bcpkix-jdk18on', version: '1.77'

    // Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // HttpClient for RestClient
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.3'

    // Apache Commons Lang
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.14.0'

    // slack
    implementation group: 'com.slack.api', name: 'slack-api-client', version: '1.36.1'

    // test
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

def querydslSrcDir = 'src/main/generated'
clean {
    delete file(querydslSrcDir)
}

tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(querydslSrcDir))
}


// Rest Docs
ext {
    set('snippetsDir', file("build/generated-snippets"))
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    configurations 'asciidoctorExtensions'
    sources {
        include("**/index.adoc")
    }
    baseDirFollowsSourceFile()
    dependsOn test
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

tasks.register('createDocs', Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

bootJar {
    dependsOn createDocs
    from("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

// Jacoco
jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
    def Qdomains = []
    for (qPattern in '**/QA'..'**/QZ') {
        Qdomains.add(qPattern + '*')
    }
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            '**/GlobalExceptionHandler.*',
                            '**/ApplePublicKeyResponse*',
                            '**/AppleService.*',
                            '**/KakaoService.*',
                            '**/*Request.*',
                            '**/*Response.*',
                            '**/*Dto.*',
                            '**/*Constant.*',
                            '**/config/**/*',
                            '**/filter/**/*',
                            '**/SlackAlert.*'
                    ] + Qdomains)
                })
        )
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.75
            }

            def Qdomains = []
            for (qPattern in '*.QA'..'*.QZ') {
                Qdomains.add(qPattern + '*')
            }

            excludes = [
                    '*.GlobalExceptionHandler',
                    '*.ApplePublicKeyResponse*',
                    '*.AppleService',
                    '*.KakaoService',
                    '*.*Request',
                    '*.*Response',
                    '*.*Dto',
                    '*.*Constant',
                    '*.config.*',
                    '*.filter.*',
                    '*.SlackAlert'
            ] + Qdomains
        }
    }
}

checkstyle {
    maxWarnings = 0
    toolVersion = '10.4'
    configFile = file('checkstyle/naver-checkstyle-rules.xml')
    configProperties = ['suppressionFile': 'checkstyle/naver-checkstyle-suppressions.xml']
    sourceSets = [sourceSets.main] // CompileQuerydsl 오류 해결
}

sonar {
    properties {
        property 'sonar.projectKey', "TF3-Project-PhotoSpot_photospot-be"
        property 'sonar.organization', "tf4project-f1bean-f2donghun-f3jaii-tjeegu-f4yana-photospot"
        property 'sonar.host.url', "https://sonarcloud.io"
        property 'sonar.java.checkstyle.reportPaths', 'build/reports/checkstyle/main.xml'
        property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/test/jacocoTestReport.xml'
        property 'sonar.coverage.exclusions', '**/GlobalExceptionHandler.*, **/AppleService.*, **/KakaoService.*, **/ApplePublicKeyResponse*' +
                '**/*Request.*, **/*Response.*, **/*Dto.*, **/*Constant.*, **/config/**/*, **/filter/**/*, **/SlackAlert.*'
    }
}